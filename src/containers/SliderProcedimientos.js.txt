import React, { useEffect, useState, useRef } from 'react';
import Image from 'next/image';
import PropTypes from 'prop-types';
import arrowLeft from '../../public/aback.svg';
import arrowLeftTwo from '../../public/aback.svg';

import styles from '@/styles/sass/SliderProcedimientos.module.css';

const SliderProcedimientos = ({ images, automaticTransition = true }) => {

    const [currentIndex, setCurrentIndex] = useState(0);
    const carouselRef = useRef(null);

    let timer;
    useEffect(() => {

        const changeImageAutomatically = () => {
            setCurrentIndex((prevIndex) => (prevIndex + 1) % images.length);
        };

        if (automaticTransition) {
            timer = setInterval(changeImageAutomatically, 4000);
        }

        return () => clearInterval(timer);
    }, [currentIndex, images, automaticTransition]);


    const showImage = (index) => {
        clearInterval(timer);
        setCurrentIndex(index);
    };

    const changeImage = (nextIndex) => {
        clearInterval(timer);
        setCurrentIndex(nextIndex);
    };

    const nextImage = () => {
        const nextIndex = (currentIndex + 1) % images.length;
        changeImage(nextIndex);
    };

    const prevImage = () => {
        const prevIndex = currentIndex === 0 ? images.length - 1 : currentIndex - 1;
        changeImage(prevIndex);
    };

    return (
        <div className={`${styles.container} ${automaticTransition ? styles.withTransition : ''}`}>
            <div
                id="carousel"
                ref={carouselRef}
            >

                {images.map((image, index) => (
                    <div
                        key={index}
                        className={`image ${index === currentIndex ? 'active' : ''}`}
                        onClick={() => showImage(index)}
                    >

                        <Image
                            className={styles.sizeImg}
                            src={image.src}
                            priority={index === currentIndex}
                            alt={image.alt}
                            width={400} // Ajusta el ancho según tus necesidades
                            height={300} // Ajusta la altura según tus necesidades
                        />
                    </div>
                ))}

                <div id="flechas">

                    <button id="prevBtn" onClick={prevImage}>
                        <Image
                            src={arrowLeft}
                            priority={false}
                            alt="Flecha izquierda"
                            width={40}
                            height={40}
                            id="arrow"
                            as="image"
                        />
                    </button>

                    <button id="nextBtn" onClick={nextImage}>
                        <Image
                            src={arrowLeftTwo}
                            priority={false}
                            alt="Flecha derecha"
                            width={40}
                            height={40}
                            id="arrow"
                            as="image"
                        />
                    </button>
                </div>
            </div>
        </div>
    );
};

// Propiedades esperadas y validación con PropTypes
SliderProcedimientos.propTypes = {
    images: PropTypes.arrayOf(
        PropTypes.shape({
            src: PropTypes.string.isRequired,
            alt: PropTypes.string.isRequired,
        })
    ).isRequired,
    automaticTransition: PropTypes.bool,
};

export default SliderProcedimientos;