// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Producto {
  id                String           @id @default(cuid())
  nombre            String
  descripcion       String?
  precio            Decimal          @db.Decimal(12,2)
  precioAnterior    Decimal?         @db.Decimal(12,2)
  categoria         String
  imagenPrincipal   String?
  imagenes          ProductoImagen[]
  videoUrl          String?
  destacado         Boolean          @default(false)
  disponible        Boolean          @default(true)
  stock             Int              @default(0)
  sku               String?          @unique
  marca             String?
  condicion         String           @default("nuevo") // nuevo, usado, reacondicionado
  tags              String[]         @default([])
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  // Relaciones para gestión de tienda
  tienda            Tienda?          @relation(fields: [tiendaId], references: [id])
  tiendaId          String?
  
  // Para tracking de ventas
  ventasItems       VentaItem[]

  // Para carrito de compras
  carritoItems      CarritoItem[]
  pedidoItems       PedidoItem[]
}

model ProductoImagen {
  id          String   @id @default(cuid())
  url         String
  alt         String?
  orden       Int      @default(0)
  producto    Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)
  productoId  String
  createdAt   DateTime @default(now())
}

model Tienda {
  id          String     @id @default(cuid())
  nombre      String
  descripcion String?
  direccion   String?
  telefono    String?
  email       String?
  logo        String?
  activa      Boolean    @default(true)
  productos   Producto[]
  ventas      Venta[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Usuario {
  id            String         @id @default(cuid())
  email         String?        @unique
  nombre        String?
  telefono      String?
  esInvitado    Boolean        @default(true)
  hashPassword  String?
  emailVerificado Boolean      @default(false)
  ultimoAcceso  DateTime?
  carrito       CarritoItem[]
  sesiones      Sesion[]
  direcciones   Direccion[]
  pedidos       Pedido[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Cliente {
  id        String   @id @default(cuid())
  nombre    String
  email     String?  @unique
  telefono  String?
  direccion String?
  ventas    Venta[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sesion {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  usuario      Usuario? @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId    String?
  guestId      String?  // Para usuarios invitados
  expires      DateTime
  carrito      CarritoItem[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model CarritoItem {
  id         String   @id @default(cuid())
  usuario    Usuario? @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId  String?
  sesion     Sesion?  @relation(fields: [sesionId], references: [id], onDelete: Cascade)
  sesionId   String?
  producto   Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)
  productoId String
  cantidad   Int
  variantes  Json?    // Para talla, color, etc.
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([usuarioId, productoId])
  @@unique([sesionId, productoId])
}

model Direccion {
  id           String   @id @default(cuid())
  usuario      Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId    String
  nombre       String   // Nombre del destinatario
  telefono     String
  departamento String
  ciudad       String
  direccion    String
  codigoPostal String?
  referencia   String?
  esPrincipal  Boolean  @default(false)
  pedidos      Pedido[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Pedido {
  id               String        @id @default(cuid())
  numero           String        @unique
  usuario          Usuario?      @relation(fields: [usuarioId], references: [id])
  usuarioId        String?
  emailInvitado    String?       // Para checkout de invitados
  items            PedidoItem[]
  direccionEnvio   Direccion?    @relation(fields: [direccionEnvioId], references: [id])
  direccionEnvioId String?
  subtotal         Decimal       @db.Decimal(12,2)
  costoEnvio       Decimal       @db.Decimal(12,2) @default(0)
  impuestos        Decimal       @db.Decimal(12,2) @default(0)
  descuentos       Decimal       @db.Decimal(12,2) @default(0)
  total            Decimal       @db.Decimal(12,2)
  estado           EstadoPedido  @default(PENDIENTE)
  metodoPago       String?
  metodoEnvio      MetodoEnvio   @default(DOMICILIO)
  trackingNumber   String?
  notas            String?
  fechaPedido      DateTime      @default(now())
  fechaConfirmado  DateTime?
  fechaEnviado     DateTime?
  fechaEntregado   DateTime?
  // Campos para ePayco
  transactionId    String?       // ID de transacción de ePayco
  approvalCode     String?       // Código de aprobación de ePayco
  transactionDate  DateTime?     // Fecha de transacción de ePayco
  paymentResponse  String?       // Respuesta completa de ePayco (JSON)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model PedidoItem {
  id          String   @id @default(cuid())
  pedido      Pedido   @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  pedidoId    String
  producto    Producto @relation(fields: [productoId], references: [id])
  productoId  String
  cantidad    Int
  precioUnit  Decimal  @db.Decimal(12,2)
  subtotal    Decimal  @db.Decimal(12,2)
  variantes   Json?    // Para talla, color, etc.
  createdAt   DateTime @default(now())
}

enum EstadoPedido {
  PENDIENTE
  PENDIENTE_PAGO    // Esperando pago en línea
  PAGADO           // Pago confirmado
  CONFIRMADO
  PREPARANDO
  ENVIADO
  ENTREGADO
  CANCELADO
  DEVUELTO
}

enum MetodoEnvio {
  DOMICILIO
  RECOGIDA_LOCAL
  MOTOTAXI
}

model Venta {
  id            String      @id @default(cuid())
  numero        String      @unique // Número de factura/orden
  cliente       Cliente?    @relation(fields: [clienteId], references: [id])
  clienteId     String?
  tienda        Tienda      @relation(fields: [tiendaId], references: [id])
  tiendaId      String
  items         VentaItem[]
  subtotal      Decimal     @db.Decimal(12,2)
  impuestos     Decimal     @db.Decimal(12,2) @default(0)
  descuentos    Decimal     @db.Decimal(12,2) @default(0)
  total         Decimal     @db.Decimal(12,2)
  estado        String      @default("pendiente") // pendiente, confirmada, enviada, completada, cancelada
  metodoPago    String?     // efectivo, tarjeta, transferencia, etc
  notas         String?
  fechaVenta    DateTime    @default(now())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model VentaItem {
  id          String   @id @default(cuid())
  venta       Venta    @relation(fields: [ventaId], references: [id], onDelete: Cascade)
  ventaId     String
  producto    Producto @relation(fields: [productoId], references: [id])
  productoId  String
  cantidad    Int
  precioUnit  Decimal  @db.Decimal(12,2)
  subtotal    Decimal  @db.Decimal(12,2)
  createdAt   DateTime @default(now())
}

model Categoria {
  id          String   @id @default(cuid())
  nombre      String   @unique
  slug        String   @unique
  descripcion String?
  icono       String?
  activa      Boolean  @default(true)
  orden       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
